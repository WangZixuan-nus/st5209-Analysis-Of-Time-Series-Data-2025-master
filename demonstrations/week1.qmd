---
title: "Week 1 Demonstration"
format: html
editor: visual
---

## Set up

We always load the following packages.

```{r}
#| message: FALSE
library(fpp3)
library(tidyverse)
```

## 1. Downloading and wrangling data

Let's start by downloading a [dataset](https://www.kaggle.com/datasets/robikscube/hourly-energy-consumption) on energy consumption from Kaggle. Save it into the raw data folder. Assuming that it is already saved, we can load it as follows.

```{r}
elec_consumption <- read_csv("../_data/raw/AEP_hourly.csv")
```

Try turning this into a tsibble.

```{r}
#| eval: FALSE
elec_consumption |> as_tsibble()
```

Something went wrong... why? Let's try to parse the error message:

```{r}
#| eval: FALSE
Using `Datetime` as index variable.
Error in `validate_tsibble()`:
! A valid tsibble must have distinct rows identified by key and index.
â„¹ Please use `duplicates()` to check the duplicated rows.
Run `rlang::last_trace()` to see where the error occurred.
```

Seems like there may be multiple entries with the same datetime. Let us check:

```{r}
duplicates(elec_consumption)
```

The duplicate entries all occur in early November at 2am. This must be because of daylight savings.

How to deal with the duplicates? Probably the most "correct" way would be to "undo" daylight savings, but there is no built-in functionality for this, so we will just perform a stop-gap and take the mean of all measurements with the same datetime.

```{r}
elec_consumption <- elec_consumption |> 
  group_by(Datetime) |>
  summarise(AEP_MW = mean(AEP_MW)) |>
  as_tsibble(index = Datetime)
```

## 2. Time plots

Let us now compute a time plot:

```{r}
elec_consumption |> autoplot()
```

There is clearly too much going on here. What can we do to visualize the time series better? 1. Filter the time series so that it is over a shorter time period. 2. Decompose the time series into seasonal, trend, and remainder components (next lesson) 3. Make a seasonal plot. 4. Aggregate the time series so that the duration between measurements is larger (e.g. days instead of hours).

Let's try to perform a filter

```{r}
#| eval: FALSE
elec_consumption |> 
  filter(Datetime < 2010) |> 
  autoplot()
```

What went wrong? Turns out inequality operations don't work naturally with datetime objects. We first need to extract the year number using the `year()` function.

```{r}
elec_consumption |> 
  filter(year(Datetime) < 2010 & year(Datetime) > 2006) |> 
  autoplot()
```

There's actually a function from `tsibble` called `filter_index()` that provides more convenient ways of filtering based on the time index.

This plot is still quite noisy, so let's make seasonal plots.

## 3. Seasonal plots

```{r}
#| eval: FALSE
elec_consumption |> 
  gg_season()
```

Oops, there's an error again. Let's inspect the error message.

```{r}
#| eval: FALSE
Plot variable not specified, automatically selected `y = AEP_MW`Error in `check_gaps()`:
! data contains implicit gaps in time. You should check your data and convert implicit gaps into explicit missing values using `tsibble::fill_gaps()` if required.
Backtrace:
 1. feasts::gg_season(elec_consumption)
 2. feasts:::check_gaps(data)
```

It says that there are gaps in the time index. This is unsurprising, because of daylight savings.

```{r}
elec_consumption |> 
  fill_gaps() |> 
  gg_season()
```

What period did `gg_season()` automatically select? It selected a period of a year (i.e. 365 \* 24).

```{r}
elec_consumption |> 
  fill_gaps() |>
  gg_season(period = "year")
```

Manually setting the period to a year gives the same plot. We can try to interpret this seasonality. The highest energy consumption occurs in January and August, corresponding to the middle of Winter and Summer respectively. This is when people make the most of heaters or air-conditioning.

```{r}
elec_consumption |> 
  fill_gaps() |> 
  filter(year(Datetime) == 2006) |>
  gg_season(period = "day")
```

There seems to be daily seasonality. Energy consumption decreases after 9pm, bottoming out around 5am, when people are sleeping. It then increases again during the day. Note also the different patterns for Summer months (blue) and Winter months (pink/orange).

```{r}
elec_consumption |> 
  fill_gaps() |> 
  filter(year(Datetime) == 2006) |>
  gg_season(period = "week")
```

There seems to be weekly seasonality too. Energy consumption is lower on the weekends than on weekdays. Note that the fluctuations over each day is part of the daily seasonality, not the weekly seasonality.

## 4. Lag plots

Make a lag plot of `elec_consumption`. What issues arise? How can you make the plot look like what was shown in the lecture video?

```{r}
elec_consumption |> 
  filter(year(Datetime) == 2007) |>
  gg_lag(geom = "point", alpha = 0.2)
```

We also experience some overplotting. We can reduce overplotting by filtering and adding transparency (alpha).
